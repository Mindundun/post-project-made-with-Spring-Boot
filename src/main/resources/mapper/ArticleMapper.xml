<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.post_project.mapper.ArticleMapper">
  <insert id="insertArticle" parameterType="ArticleDto" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO article(title, contents, writer)
    VALUES (#{title}, #{contents}, #{writer})
  </insert>

  <select id="selectArticleList" resultType="ArticleDto">
    SELECT id       ,
           title    ,
           contents ,
           writer   ,
           reg_date AS regDate
      FROM article
     ORDER BY id DESC
  </select>

  <!-- <select id="selectArticleById" parameterType="int" resultType="ArticleDto">
    SELECT id       ,
           title    ,
           contents ,
           writer   ,
           reg_date AS regDate
      FROM article
     WHERE id = #{id}
  </select> -->
  <resultMap id="selectArticleByIdResultMap" type="ArticleDto">
    <id property="id" column="id"/> <!-- column은 DB의 id 명칭 데이터를 property에 적힌 ArticleDto의 id로 매핑, id는 기본키니까 id태그에 -->
    
    <result property="title" column="title"/>
    <result property="contents" column="contents"/>
    <result property="writer" column="writer"/>
    <result property="regDate" column="regDate"/>
    <association property="user" javaType="UserDto">
      <id property="id" column="userId"/>
      <result property="email" column="email"/>
      <result property="phone" column="phone"/>
    </association>
    <collection property="files" ofType="ArticleFileDto">
      <id property="id" column="fileId"/>
      <result property="fileName" column="fileName"/>
      <result property="filePath" column="filePath"/>
      <result property="fileSize" column="fileSize"/>
      <result property="articleId" column="articleId"/>   <!-- column은 alias 명칭 -->      
    </collection>

  </resultMap>

  <select id="selectArticleById" parameterType="int" resultMap="selectArticleByIdResultMap">
    SELECT A.id           AS id      ,
           A.title        AS title   ,
           A.contents     AS contents,
           A.writer       AS writer  ,
           A.reg_date     AS regDate ,

           F.id           AS fileId  ,
           F.file_name    AS fileName,
           F.file_path    AS filePath,
           F.file_size    AS fileSize,
           F.article_id   AS articleId,

           U.id           AS userId ,
           U.email        AS email  ,
           U.phone        AS phone  
      FROM article AS A 
        LEFT OUTER JOIN article_file AS F ON F.article_id = A.id
                   JOIN user         AS U ON U.id         = A.user_id
     WHERE A.id = #{id}

  </select>

  <update id="updateArticle" parameterType="ArticleDto">
    UPDATE article
       SET title    = #{title}    ,
           contents = #{contents} ,
           writer   = #{writer}
     WHERE id = #{id}
  </update>

  <delete id="deleteArticle" parameterType="int">
    DELETE 
      FROM article
     WHERE id = #{id}
  </delete>

  <select id="findArticleList" parameterType="Criteria" resultType="ArticleDto">
    SELECT id       ,
           title    ,
           contents ,
           writer   ,
           reg_date AS regDate
      FROM article
    <if test="keyfield != '' and keyword != ''">
      <trim prefix="WHERE"> <!-- <where>도 가능 -->      
        <choose>
          <when test="keyfield == 'title'">
            title Like CONCAT('%',#{keyword},'%')
          </when>
          <when test="keyfield == 'contents'">
            contents Like CONCAT('%',#{keyword},'%')
          </when>
          <when test="keyfield == 'writer'">
            writer Like CONCAT('%',#{keyword},'%')
          </when>
        </choose>        
      </trim>
    </if>
    ORDER BY id DESC
  </select>
</mapper>